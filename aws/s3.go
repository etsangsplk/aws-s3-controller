package aws

import (
	// "encoding/json"
	// "fmt"
	// "net/http"
	// "strconv"
	// "strings"
	// "time"

	// "github.com/cnf/structhash"

	// "github.com/aws/aws-sdk-go/aws"
	// "github.com/aws/aws-sdk-go/aws/awserr"
	// "github.com/aws/aws-sdk-go/aws/arn"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"github.com/aws/aws-sdk-go/service/cloudformation/cloudformationiface"
	// "github.com/aws/aws-sdk-go/service/ec2"
	// "github.com/aws/aws-sdk-go/service/ec2/ec2iface"
	// "github.com/aws/aws-sdk-go/service/ecs"
	// "github.com/aws/aws-sdk-go/service/ecs/ecsiface"
	// "github.com/aws/aws-sdk-go/service/s3"
	// "github.com/aws/aws-sdk-go/service/s3/s3iface"
	// "github.com/aws/aws-sdk-go/service/s3/s3manager"
)

const (
    defaultStackCreationTimeoutMin = 5
    defaultOnFailureBehavior = cloudformation.OnFailureRollback
)

type CfnOptions struct {
    cfnTemplate string
    terminationProtection bool
    stackCreationTimeoutMin int
    onFailureBehavior string

func NewCfnOptions() *Options {
    return &Options{
        stackCreationTimeoutMin =5,
        onFailureBehaviour = cloudformation.OnFailureRollback,
    }
}

type Client struct {
	cfnSvc  *cloudformationiface.CloudFormationAPI
	bucket  *string
	path    *string
	roleArn *arn.ARN
    option *CfnOptions
}

func New(cfnSvc *cloudformationiface.CloudFormationAPI) *Client {
	return &Client{
		cfnSvc: cfnSvc,
        option: NewCfnOptions(),
	}
}

func (c *Client) CreateStack() error {


    // The input for CreateStack action.
type CreateStackInput struct {
    _ struct{} `type:"structure"`

    // A list of values that you must specify before AWS CloudFormation can create
    // certain stacks. Some stack templates might include resources that can affect
    // permissions in your AWS account, for example, by creating new AWS Identity
    // and Access Management (IAM) users. For those stacks, you must explicitly
    // acknowledge their capabilities by specifying this parameter.
    //
    // The only valid values are CAPABILITY_IAM and CAPABILITY_NAMED_IAM. The following
    // resources require you to specify this parameter:  AWS::IAM::AccessKey (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html),
    //  AWS::IAM::Group (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html),
    //  AWS::IAM::InstanceProfile (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html),
    //  AWS::IAM::Policy (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html),
    //  AWS::IAM::Role (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html),
    //  AWS::IAM::User (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html),
    // and  AWS::IAM::UserToGroupAddition (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html).
    // If your stack template contains these resources, we recommend that you review
    // all permissions associated with them and edit their permissions if necessary.
    //
    // If you have IAM resources, you can specify either capability. If you have
    // IAM resources with custom names, you must specify CAPABILITY_NAMED_IAM. If
    // you don't specify this parameter, this action returns an InsufficientCapabilities
    // error.
    //
    // For more information, see Acknowledging IAM Resources in AWS CloudFormation
    // Templates (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities).
    Capabilities []*string `type:"list"`

    // A unique identifier for this CreateStack request. Specify this token if you
    // plan to retry requests so that AWS CloudFormation knows that you're not attempting
    // to create a stack with the same name. You might retry CreateStack requests
    // to ensure that AWS CloudFormation successfully received them.
    //
    // All events triggered by a given stack operation are assigned the same client
    // request token, which you can use to track operations. For example, if you
    // execute a CreateStack operation with the token token1, then all the StackEvents
    // generated by that operation will have ClientRequestToken set as token1.
    //
    // In the console, stack operations display the client request token on the
    // Events tab. Stack operations that are initiated from the console use the
    // token format Console-StackOperation-ID, which helps you easily identify the
    // stack operation . For example, if you create a stack using the console, each
    // stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    ClientRequestToken *string `min:"1" type:"string"`

    // Set to true to disable rollback of the stack if stack creation failed. You
    // can specify either DisableRollback or OnFailure, but not both.
    //
    // Default: false
    DisableRollback *bool `type:"boolean"`

    // Whether to enable termination protection on the specified stack. If a user
    // attempts to delete a stack with termination protection enabled, the operation
    // fails and the stack remains unchanged. For more information, see Protecting
    // a Stack From Being Deleted (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html)
    // in the AWS CloudFormation User Guide. Termination protection is disabled
    // on stacks by default.
    //
    // For nested stacks (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html),
    // termination protection is set on the root stack and cannot be changed directly
    // on the nested stack.
    EnableTerminationProtection *bool `type:"boolean"`

    // The Simple Notification Service (SNS) topic ARNs to publish stack related
    // events. You can find your SNS topic ARNs using the SNS console or your Command
    // Line Interface (CLI).
    NotificationARNs []*string `type:"list"`

    // Determines what action will be taken if stack creation fails. This must be
    // one of: DO_NOTHING, ROLLBACK, or DELETE. You can specify either OnFailure
    // or DisableRollback, but not both.
    //
    // Default: ROLLBACK
    OnFailure *string `type:"string" enum:"OnFailure"`

    // A list of Parameter structures that specify input parameters for the stack.
    // For more information, see the Parameter (http://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html)
    // data type.
    Parameters []*Parameter `type:"list"`

    // The template resource types that you have permissions to work with for this
    // create stack action, such as AWS::EC2::Instance, AWS::EC2::*, or Custom::MyCustomInstance.
    // Use the following syntax to describe template resource types: AWS::* (for
    // all AWS resource), Custom::* (for all custom resources), Custom::logical_ID
    // (for a specific custom resource), AWS::service_name::* (for all resources
    // of a particular AWS service), and AWS::service_name::resource_logical_ID
    // (for a specific AWS resource).
    //
    // If the list of resource types doesn't include a resource that you're creating,
    // the stack creation fails. By default, AWS CloudFormation grants permissions
    // to all resource types. AWS Identity and Access Management (IAM) uses this
    // parameter for AWS CloudFormation-specific condition keys in IAM policies.
    // For more information, see Controlling Access with AWS Identity and Access
    // Management (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html).
    ResourceTypes []*string `type:"list"`

    // The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM)
    // role that AWS CloudFormation assumes to create the stack. AWS CloudFormation
    // uses the role's credentials to make calls on your behalf. AWS CloudFormation
    // always uses this role for all future operations on the stack. As long as
    // users have permission to operate on the stack, AWS CloudFormation uses this
    // role even if the users don't have permission to pass it. Ensure that the
    // role grants least privilege.
    //
    // If you don't specify a value, AWS CloudFormation uses the role that was previously
    // associated with the stack. If no role is available, AWS CloudFormation uses
    // a temporary session that is generated from your user credentials.
    RoleARN *string `min:"20" type:"string"`

    // The rollback triggers for AWS CloudFormation to monitor during stack creation
    // and updating operations, and for the specified monitoring period afterwards.
    RollbackConfiguration *RollbackConfiguration `type:"structure"`

    // The name that is associated with the stack. The name must be unique in the
    // region in which you are creating the stack.
    //
    // A stack name can contain only alphanumeric characters (case sensitive) and
    // hyphens. It must start with an alphabetic character and cannot be longer
    // than 128 characters.
    //
    // StackName is a required field
    StackName *string `type:"string" required:"true"`

    // Structure containing the stack policy body. For more information, go to
    // Prevent Updates to Stack Resources (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html)
    // in the AWS CloudFormation User Guide. You can specify either the StackPolicyBody
    // or the StackPolicyURL parameter, but not both.
    StackPolicyBody *string `min:"1" type:"string"`

    // Location of a file containing the stack policy. The URL must point to a policy
    // (maximum size: 16 KB) located in an S3 bucket in the same region as the stack.
    // You can specify either the StackPolicyBody or the StackPolicyURL parameter,
    // but not both.
    StackPolicyURL *string `min:"1" type:"string"`

    // Key-value pairs to associate with this stack. AWS CloudFormation also propagates
    // these tags to the resources created in the stack. A maximum number of 50
    // tags can be specified.
    Tags []*Tag `type:"list"`

    // Structure containing the template body with a minimum length of 1 byte and
    // a maximum length of 51,200 bytes. For more information, go to Template Anatomy
    // (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html)
    // in the AWS CloudFormation User Guide.
    //
    // Conditional: You must specify either the TemplateBody or the TemplateURL
    // parameter, but not both.
    TemplateBody *string `min:"1" type:"string"`

    // Location of file containing the template body. The URL must point to a template
    // (max size: 460,800 bytes) that is located in an Amazon S3 bucket. For more
    // information, go to the Template Anatomy (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html)
    // in the AWS CloudFormation User Guide.
    //
    // Conditional: You must specify either the TemplateBody or the TemplateURL
    // parameter, but not both.
    TemplateURL *string `min:"1" type:"string"`

    // The amount of time that can pass before the stack status becomes CREATE_FAILED;
    // if DisableRollback is not set or is set to false, the stack will be rolled
    // back.
    TimeoutInMinutes *int64 `min:"1" type:"integer"`
}


    stackInput := &cloudformation.CreateStackInput{
        Capabilities:                []*string{aws.String(cloudformation.CapabilityCapabilityNamedIam)},
        EnableTerminationProtection: aws.Bool(false),
        OnFailure:                   aws.String(defaultOnFailureBehavior),
        Parameters:                  cfnInput.Parameters,
        StackName:                   aws.String(in.Scope.String()),
        Tags:                        tags,
        TemplateBody:                cfnTemplate,
        TimeoutInMinutes:            aws.Int64(defaultStackCreationTimeoutMin),
    }

    o, err := c.cfnSvc.CreateStack(&cloudformation.CreateStackInstancesInput{

        })

    return err
}

func (c *Client) DeleteStack() error {

}

func (c *Client) UpdateStack() error {

}

func (c *Client) GetStackEvents() error {

}

func (c *Client) CreateS3bucket(bucket, role string) error {
    if err := validateStrings([]string{bucket, role}); err != nil {
        return err
    }

    return err
}

func (c *Client) CreateS3bucketFolder(bucket, path, role string) error {
    if err := validateStrings([]string{bucket, path, role}); err != nil {
        return err
    }

    return err
}

func (c *Client) DeleteS3bucket(bucket, path, role string) error {
    if err := validateStrings([]string{bucket, path, role}); err != nil {
        return err
    }

type DeleteStackInput struct {
    _ struct{} `type:"structure"`

    // A unique identifier for this DeleteStack request. Specify this token if you
    // plan to retry requests so that AWS CloudFormation knows that you're not attempting
    // to delete a stack with the same name. You might retry DeleteStack requests
    // to ensure that AWS CloudFormation successfully received them.
    //
    // All events triggered by a given stack operation are assigned the same client
    // request token, which you can use to track operations. For example, if you
    // execute a CreateStack operation with the token token1, then all the StackEvents
    // generated by that operation will have ClientRequestToken set as token1.
    //
    // In the console, stack operations display the client request token on the
    // Events tab. Stack operations that are initiated from the console use the
    // token format Console-StackOperation-ID, which helps you easily identify the
    // stack operation . For example, if you create a stack using the console, each
    // stack event would be assigned the same token in the following format: Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002.
    ClientRequestToken *string `min:"1" type:"string"`

    // For stacks in the DELETE_FAILED state, a list of resource logical IDs that
    // are associated with the resources you want to retain. During deletion, AWS
    // CloudFormation deletes the stack but does not delete the retained resources.
    //
    // Retaining resources is useful when you cannot delete a resource, such as
    // a non-empty S3 bucket, but you want to delete the stack.
    RetainResources []*string `type:"list"`

    // The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM)
    // role that AWS CloudFormation assumes to delete the stack. AWS CloudFormation
    // uses the role's credentials to make calls on your behalf.
    //
    // If you don't specify a value, AWS CloudFormation uses the role that was previously
    // associated with the stack. If no role is available, AWS CloudFormation uses
    // a temporary session that is generated from your user credentials.
    RoleARN *string `min:"20" type:"string"`

    // The name or the unique stack ID that is associated with the stack.
    //
    // StackName is a required field
    StackName *string `type:"string" required:"true"`
}

    return err
}

func (c *Client) UpdateS3bucket(bucket, path, role string) error {
    if err := validateStrings([]string{bucket, path, role}); err != nil {
        return err
    }

    return err
}

func (c *Client) UpdateS3bucketFolder(bucket, path, role string) error {
    if err := validateStrings([]string{bucket, path, role}); err != nil {
        return err
    }

    return err
}

func (c *Client) setBucket(bucket string) *Client {
    c.bucket = aws.String(bucket)
    return c
}

func (c *Client) setBucketPath(path string) *Client {
    c.path = aws.String(path)
    return c
}

func (c *Client) setIAMRoleArn(arn string) *Client {
    c.roleArn, err := parseRoleArn(arn)
    return c
}